{"version":3,"file":"static/js/789.76f9afe8.chunk.js","mappings":"2YAqBMA,GAAQC,EAAAA,EAAAA,GAAY,CACxBC,WAAY,CACVC,WAAY,CACV,cACA,sBACA,gBACA,sBACA,SACA,UACA,gBACAC,KAAK,KACPC,SAAU,MAIC,SAASC,IAItB,OAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,IAAnC,eAAOK,EAAP,KAAcC,EAAd,KACA,GAAoCN,EAAAA,EAAAA,WAAS,GAA7C,eAAOO,EAAP,KAAmBC,EAAnB,KACA,GAAgCR,EAAAA,EAAAA,UAAS,IAAzC,eAAOS,EAAP,KAAiBC,EAAjB,KACA,GAA0CV,EAAAA,EAAAA,WAAS,GAAnD,eAAOW,EAAP,KAAsBC,EAAtB,KACA,GAA0BZ,EAAAA,EAAAA,UAAS,MAAnC,eAAOa,EAAP,KAAcC,EAAd,KAGMC,EAAU,CAAEd,KAAMC,EAASG,MAAOC,EAAUG,SAAUC,GAE5D,SAASM,EAAT,GAAgD,IAAD,IAA3BC,OAAUhB,EAAiB,EAAjBA,KAAMiB,EAAW,EAAXA,MAClCH,EAAQd,GAAMiB,EAAMC,cACrB,CAED,SAASC,EAAT,GAA8C,IAAD,IAA3BH,OAAUhB,EAAiB,EAAjBA,KAAMiB,EAAW,EAAXA,MAChCH,EAAQd,GAAMiB,EAAMC,eACpBf,GAAa,GACbI,GAAc,GACdI,EAAiB,KAElB,CAGD,IAAMS,GAAWC,EAAAA,EAAAA,MAEXC,EAAY,mCAAG,WAAMC,GAAN,4EACnBA,EAAMC,iBAEc,KAAhBxB,EAAKyB,OAHU,uBAIjBtB,GAAa,GAJI,6BAWL,KAAVC,EAXe,uBAYjBG,GAAc,GAZG,+BAmBfC,EAASkB,OAAS,GAnBH,wBAoBjBf,GAAiB,GApBA,2BAuBjBA,EAAiB,MAvBA,eA0BbgB,EAAO,IAAIC,SAASL,EAAMM,eA1Bb,UA2BDT,EAChBU,EAAAA,EAAAA,SAAwB,CACtB9B,KAAM2B,EAAKI,IAAI,QACf3B,MAAOuB,EAAKI,IAAI,SAChBvB,SAAUmB,EAAKI,IAAI,eA/BJ,WA2BbC,EA3Ba,OAkCnBC,QAAQC,IAAIF,GACe,MAAvBA,EAAIG,QAAQC,OAnCG,wBAoCjBvB,EAAS,2BApCQ,2BAuCjBA,GAAS,GAvCQ,4CAAH,sDA0ElB,OACE,+BACE,SAAC,IAAD,CAAerB,MAAOA,EAAtB,UACE,UAAC,IAAD,CAAW6C,UAAU,OAAOC,SAAS,KAArC,WACE,SAAC,KAAD,KACA,UAAC,IAAD,CACEC,GAAI,CACFC,UAAW,EACXC,QAAS,OACTC,cAAe,SACfC,WAAY,UALhB,WAQE,SAAC,IAAD,CAAQJ,GAAI,CAAEK,EAAG,EAAGC,QAAS,kBAA7B,UACE,SAAC,IAAD,OAEF,SAAC,IAAD,CAAYR,UAAU,KAAKS,QAAQ,KAAnC,sBAGA,UAAC,IAAD,CACET,UAAU,OACVU,YAAU,EACVC,SAAU1B,EACViB,GAAI,CAAEU,GAAI,GAJZ,WAME,UAAC,KAAD,CAAMC,WAAS,EAACC,QAAS,EAAzB,WACE,UAAC,KAAD,CAAMC,MAAI,EAACC,GAAI,GAAf,UACGzC,IACC,SAAC,IAAD,CACE0C,MAAO,CAAEC,aAAc,QACvBT,QAAQ,WACRU,SAAS,QAHX,SAKG5C,KAGL,SAAC,IAAD,CACEO,OAAQA,EAERP,MAAOV,EACPuD,aAAa,aACbzD,KAAK,OAEL0D,UAAQ,EACRC,WAAS,EACTC,GAAG,OACHC,MAAM,OACNC,WAAS,QAGb,SAAC,KAAD,CAAMV,MAAI,EAACC,GAAI,GAAf,UAUE,SAAC,IAAD,CACElC,OAAQA,EAERuC,UAAQ,EACRC,WAAS,EACT/C,MAAON,EACPsD,GAAG,QACHC,MAAM,QACN7D,KAAK,QAELyD,aAAa,QACbM,KAAK,aAIT,SAAC,KAAD,CAAMX,MAAI,EAACC,GAAI,GAAf,SACI3C,GAeA,SAAC,IAAD,CACEK,SAAUA,EACV2C,UAAQ,EACRC,WAAS,EACT/C,MAAOF,EACPV,KAAK,WAEL6D,MAAM,WACNG,WAAW,2DACXD,KAAK,WACLH,GAAG,WACHH,aAAa,kBAzBf,SAAC,IAAD,CAEE1C,SAAUA,EACV2C,UAAQ,EACRC,WAAS,EAET3D,KAAK,WAEL6D,MAAM,WACNE,KAAK,WACLH,GAAG,WACHH,aAAa,uBA2BrB,SAAC,IAAD,CACEM,KAAK,SACLJ,WAAS,EACTb,QAAQ,YACRP,GAAI,CAAEU,GAAI,EAAGgB,GAAI,GAJnB,sBAQA,SAAC,KAAD,CAAMf,WAAS,EAACgB,eAAe,WAA/B,UACE,SAAC,KAAD,CAAMd,MAAI,EAAV,UACE,SAAC,IAAD,CAAMe,KAAK,QAAQrB,QAAQ,QAA3B,8DAWjB,C","sources":["pages/RegisterPage/RegisterForm.jsx"],"sourcesContent":["// import { useState } from 'react';\n\nimport { useDispatch } from 'react-redux';\nimport authOperations from 'redux/auth/authOperations';\nimport * as React from 'react';\nimport Avatar from '@mui/material/Avatar';\nimport Button from '@mui/material/Button';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport TextField from '@mui/material/TextField';\n// import FormControlLabel from '@mui/material/FormControlLabel';\n// import Checkbox from '@mui/material/Checkbox';\nimport Link from '@mui/material/Link';\nimport Grid from '@mui/material/Grid';\nimport Box from '@mui/material/Box';\nimport LockOutlinedIcon from '@mui/icons-material/LockOutlined';\nimport Typography from '@mui/material/Typography';\nimport Container from '@mui/material/Container';\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\nimport { useState } from 'react';\nimport Alert from '@mui/material/Alert';\n\nconst theme = createTheme({\n  typography: {\n    fontFamily: [\n      'Lucida Sans',\n      'Lucida Sans Regular',\n      'Lucida Grande',\n      'Lucida Sans Unicode',\n      'Geneva',\n      'Verdana',\n      'sans - serif',\n    ].join(','),\n    fontSize: 15,\n  },\n});\n\nexport default function RegisterForm() {\n  // const [error, setError] = useState(null);\n  // const [name, setName] = useState(null);\n  // const [isUser, setIsUser] = useState(null);\n  const [name, setName] = useState('');\n  const [nameError, setNameError] = useState(false);\n  const [email, setEmail] = useState('');\n  const [emailError, setEmailError] = useState(false);\n  const [password, setPassword] = useState('');\n  const [passwordError, setPasswordError] = useState(false);\n  const [error, setError] = useState(null);\n  // const [passwordError, setPasswordError] = useState(null);\n\n  const options = { name: setName, email: setEmail, password: setPassword };\n\n  function onChange({ target: { name, value } }) {\n    options[name](value.toLowerCase());\n  }\n\n  function onBlur({ target: { name, value } }) {\n    options[name](value.toLowerCase());\n    setNameError(false);\n    setEmailError(false);\n    setPasswordError(null);\n    // console.log(e.target);\n  }\n  // console.log(name);\n\n  const dispatch = useDispatch();\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n\n    if (name.trim() === '') {\n      setNameError(true);\n      return;\n    }\n    // else {\n    //   setNameError(false);\n    // }\n\n    if (email === '') {\n      setEmailError(true);\n      return;\n    }\n    // else {\n    //   setEmailError(false);\n    // }\n\n    if (password.length < 7) {\n      setPasswordError(true);\n      return;\n    } else {\n      setPasswordError(null);\n    }\n\n    const data = new FormData(event.currentTarget);\n    const res = await dispatch(\n      authOperations.register({\n        name: data.get('name'),\n        email: data.get('email'),\n        password: data.get('password'),\n      })\n    );\n    console.log(res);\n    if (res.payload.status === 400) {\n      setError('Wrong password or email');\n      return;\n    } else {\n      setError(false);\n    }\n\n    // const nameUser = event.target.elements.name.value;\n    // const passwordLength = event.target.elements.password.value.length;\n    // const emailLength = event.target.elements.email.value;\n\n    // if (nameUser === '') {\n    //   setName(true);\n    // } else {\n    //   setName(null);\n    // }\n\n    // if (passwordLength < 7) {\n    //   setPasswordError(true);\n    // } else {\n    //   setPasswordError(null);\n    // }\n\n    // if (res.payload.message === undefined) {\n    //   setIsUser('User with this email already exists');\n    // } else {\n    //   setIsUser(null);\n    // }\n\n    // if (\n    //   res.payload.message === 'User validation failed: email: Invalid email.' ||\n    //   emailLength === ''\n    // ) {\n    //   setError(true);\n    // } else {\n    //   setError(null);\n    // }\n  };\n\n  return (\n    <>\n      <ThemeProvider theme={theme}>\n        <Container component=\"main\" maxWidth=\"xs\">\n          <CssBaseline />\n          <Box\n            sx={{\n              marginTop: 8,\n              display: 'flex',\n              flexDirection: 'column',\n              alignItems: 'center',\n            }}\n          >\n            <Avatar sx={{ m: 1, bgcolor: 'secondary.main' }}>\n              <LockOutlinedIcon />\n            </Avatar>\n            <Typography component=\"h1\" variant=\"h5\">\n              Sign up\n            </Typography>\n            <Box\n              component=\"form\"\n              noValidate\n              onSubmit={handleSubmit}\n              sx={{ mt: 3 }}\n            >\n              <Grid container spacing={2}>\n                <Grid item xs={12}>\n                  {error && (\n                    <Alert\n                      style={{ marginBottom: '15px' }}\n                      variant=\"outlined\"\n                      severity=\"error\"\n                    >\n                      {error}\n                    </Alert>\n                  )}\n                  <TextField\n                    onBlur={onBlur}\n                    // onChange={onChange}\n                    error={nameError}\n                    autoComplete=\"given-name\"\n                    name=\"name\"\n                    // value={name}\n                    required\n                    fullWidth\n                    id=\"name\"\n                    label=\"Name\"\n                    autoFocus\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  {/* {isUser && (\n                    <Alert\n                      variant=\"outlined\"\n                      severity=\"error\"\n                      style={{ marginBottom: '15px' }}\n                    >\n                      {isUser}\n                    </Alert>\n                  )} */}\n                  <TextField\n                    onBlur={onBlur}\n                    // onChange={onChange}\n                    required\n                    fullWidth\n                    error={emailError}\n                    id=\"email\"\n                    label=\"Email\"\n                    name=\"email\"\n                    // value={email}\n                    autoComplete=\"email\"\n                    type=\"email\"\n                  />\n                </Grid>\n\n                <Grid item xs={12}>\n                  {!passwordError ? (\n                    <TextField\n                      // onBlur={onBlur}\n                      onChange={onChange}\n                      required\n                      fullWidth\n                      // error={passwordError}\n                      name=\"password\"\n                      // value={password}\n                      label=\"Password\"\n                      type=\"password\"\n                      id=\"password\"\n                      autoComplete=\"new-password\"\n                    />\n                  ) : (\n                    <TextField\n                      onChange={onChange}\n                      required\n                      fullWidth\n                      error={passwordError}\n                      name=\"password\"\n                      // value={password}\n                      label=\"Password\"\n                      helperText=\"Password is shorter than the minimum allowed length (7).\"\n                      type=\"password\"\n                      id=\"password\"\n                      autoComplete=\"new-password\"\n                    />\n                  )}\n                </Grid>\n                {/* <Grid item xs={12}>\n          <FormControlLabel\n            control={\n              <Checkbox value=\"allowExtraEmails\" color=\"primary\" />\n            }\n            label=\"I want to receive inspiration, marketing promotions and updates via email.\"\n          />\n        </Grid> */}\n              </Grid>\n              <Button\n                type=\"submit\"\n                fullWidth\n                variant=\"contained\"\n                sx={{ mt: 3, mb: 2 }}\n              >\n                Sign Up\n              </Button>\n              <Grid container justifyContent=\"flex-end\">\n                <Grid item>\n                  <Link href=\"login\" variant=\"body2\">\n                    Already have an account? Sign in\n                  </Link>\n                </Grid>\n              </Grid>\n            </Box>\n          </Box>\n        </Container>\n      </ThemeProvider>\n    </>\n  );\n}\n\n// export default function RegisterForm() {\n// const [name, setName] = useState('');\n// const [email, setEmail] = useState('');\n// const [password, setPassword] = useState('');\n//   const dispatch = useDispatch();\n\n// const options = { name: setName, email: setEmail, password: setPassword };\n\n// function onChange({ target: { name, value } }) {\n//   options[name](value);\n// }\n\n//   function onSubmit(e) {\n//     e.preventDefault();\n//     dispatch(authOperations.register({ name, email, password }));\n//   }\n//   return (\n//     <>\n//       <form onSubmit={onSubmit}>\n//         <label>\n//           Name{' '}\n//           <input type=\"text\" name=\"name\" value={name} onChange={onChange} />\n//         </label>\n//         <label>\n//           Email{' '}\n//           <input type=\"email\" name=\"email\" value={email} onChange={onChange} />\n//         </label>\n//         <label>\n//           Password{' '}\n//           <input\n//             type=\"text\"\n//             name=\"password\"\n//             value={password}\n//             onChange={onChange}\n//           />\n//         </label>\n//         <button type=\"submit\">submit</button>\n//       </form>\n//     </>\n//   );\n"],"names":["theme","createTheme","typography","fontFamily","join","fontSize","RegisterForm","useState","name","setName","nameError","setNameError","email","setEmail","emailError","setEmailError","password","setPassword","passwordError","setPasswordError","error","setError","options","onChange","target","value","toLowerCase","onBlur","dispatch","useDispatch","handleSubmit","event","preventDefault","trim","length","data","FormData","currentTarget","authOperations","get","res","console","log","payload","status","component","maxWidth","sx","marginTop","display","flexDirection","alignItems","m","bgcolor","variant","noValidate","onSubmit","mt","container","spacing","item","xs","style","marginBottom","severity","autoComplete","required","fullWidth","id","label","autoFocus","type","helperText","mb","justifyContent","href"],"sourceRoot":""}