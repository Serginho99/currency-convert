{"version":3,"file":"static/js/789.cbdea661.chunk.js","mappings":"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","sources":["pages/RegisterPage/RegisterForm.jsx"],"sourcesContent":["// import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport authOperations from 'redux/auth/authOperations';\nimport * as React from 'react';\nimport Avatar from '@mui/material/Avatar';\nimport Button from '@mui/material/Button';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport TextField from '@mui/material/TextField';\n// import FormControlLabel from '@mui/material/FormControlLabel';\n// import Checkbox from '@mui/material/Checkbox';\nimport Link from '@mui/material/Link';\nimport Grid from '@mui/material/Grid';\nimport Box from '@mui/material/Box';\nimport LockOutlinedIcon from '@mui/icons-material/LockOutlined';\nimport Typography from '@mui/material/Typography';\nimport Container from '@mui/material/Container';\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\nimport { useState } from 'react';\nimport Alert from '@mui/material/Alert';\n\nconst theme = createTheme();\n\nexport default function RegisterForm() {\n  const [error, setError] = useState(null);\n  const [name, setName] = useState(null);\n  const [isUser, setIsUser] = useState(null);\n  const [passwordError, setPasswordError] = useState(null);\n\n  const dispatch = useDispatch();\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n    // if (user === undefined) {\n    //   return;\n    // }\n    const data = new FormData(event.currentTarget);\n    // console.log({\n    //   name: data.get('name'),\n    //   email: data.get('email'),\n    //   password: data.get('password'),\n    // });\n    const res = await dispatch(\n      authOperations.register({\n        name: data.get('name'),\n        email: data.get('email'),\n        password: data.get('password'),\n      })\n    );\n    console.log(res.payload);\n    const nameUser = event.target.elements.name.value;\n    const passwordLength = event.target.elements.password.value.length;\n    const emailLength = event.target.elements.email.value;\n    if (nameUser === '') {\n      setName(true);\n    } else {\n      setName(null);\n    }\n    if (passwordLength < 7) {\n      setPasswordError(true);\n    } else {\n      setPasswordError(null);\n    }\n    if (res.payload.message === undefined) {\n      setIsUser('User with this email already exists');\n    } else {\n      setIsUser(null);\n    }\n    if (\n      res.payload.message === 'User validation failed: email: Invalid email.' ||\n      emailLength === ''\n    ) {\n      setError(true);\n    } else {\n      setError(null);\n    }\n  };\n\n  return (\n    <ThemeProvider theme={theme}>\n      <Container component=\"main\" maxWidth=\"xs\">\n        <CssBaseline />\n        <Box\n          sx={{\n            marginTop: 8,\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n          }}\n        >\n          <Avatar sx={{ m: 1, bgcolor: 'secondary.main' }}>\n            <LockOutlinedIcon />\n          </Avatar>\n          <Typography component=\"h1\" variant=\"h5\">\n            Sign up\n          </Typography>\n          <Box\n            component=\"form\"\n            noValidate\n            onSubmit={handleSubmit}\n            sx={{ mt: 3 }}\n          >\n            <Grid container spacing={2}>\n              <Grid item xs={12}>\n                {!name ? (\n                  <TextField\n                    autoComplete=\"given-name\"\n                    name=\"name\"\n                    required\n                    fullWidth\n                    id=\"name\"\n                    label=\"Name\"\n                    autoFocus\n                  />\n                ) : (\n                  <TextField\n                    error\n                    autoComplete=\"given-name\"\n                    name=\"name\"\n                    required\n                    fullWidth\n                    id=\"name\"\n                    label=\"Invalid name\"\n                    autoFocus\n                  />\n                )}\n              </Grid>\n              {/* <Grid item xs={12} sm={6}>\n                <TextField\n                  required\n                  fullWidth\n                  id=\"lastName\"\n                  label=\"Last Name\"\n                  name=\"lastName\"\n                  autoComplete=\"family-name\"\n                />\n              </Grid> */}\n              <Grid item xs={12}>\n                {isUser && (\n                  <Alert\n                    variant=\"outlined\"\n                    severity=\"error\"\n                    style={{ marginBottom: '15px' }}\n                  >\n                    {isUser}\n                  </Alert>\n                )}\n                {!error ? (\n                  <TextField\n                    required\n                    fullWidth\n                    id=\"email\"\n                    label=\"Email Address\"\n                    name=\"email\"\n                    autoComplete=\"email\"\n                  />\n                ) : (\n                  <TextField\n                    required\n                    fullWidth\n                    error\n                    id=\"email\"\n                    label=\"Invalid email\"\n                    name=\"email\"\n                    autoComplete=\"email\"\n                  />\n                )}\n              </Grid>\n\n              <Grid item xs={12}>\n                {!passwordError ? (\n                  <TextField\n                    required\n                    fullWidth\n                    name=\"password\"\n                    label=\"Password\"\n                    type=\"password\"\n                    id=\"password\"\n                    autoComplete=\"new-password\"\n                  />\n                ) : (\n                  <TextField\n                    required\n                    fullWidth\n                    error\n                    name=\"password\"\n                    label=\"Password is shorter than the minimum allowed length (7)\"\n                    type=\"password\"\n                    id=\"password\"\n                    autoComplete=\"new-password\"\n                  />\n                )}\n              </Grid>\n              {/* <Grid item xs={12}>\n                <FormControlLabel\n                  control={\n                    <Checkbox value=\"allowExtraEmails\" color=\"primary\" />\n                  }\n                  label=\"I want to receive inspiration, marketing promotions and updates via email.\"\n                />\n              </Grid> */}\n            </Grid>\n            <Button\n              type=\"submit\"\n              fullWidth\n              variant=\"contained\"\n              sx={{ mt: 3, mb: 2 }}\n            >\n              Sign Up\n            </Button>\n            <Grid container justifyContent=\"flex-end\">\n              <Grid item>\n                <Link href=\"login\" variant=\"body2\">\n                  Already have an account? Sign in\n                </Link>\n              </Grid>\n            </Grid>\n          </Box>\n        </Box>\n      </Container>\n    </ThemeProvider>\n  );\n}\n\n// export default function RegisterForm() {\n//   const [name, setName] = useState('');\n//   const [email, setEmail] = useState('');\n//   const [password, setPassword] = useState('');\n//   const dispatch = useDispatch();\n\n//   const options = { name: setName, email: setEmail, password: setPassword };\n\n//   function onChange({ target: { name, value } }) {\n//     options[name](value);\n//   }\n\n//   function onSubmit(e) {\n//     e.preventDefault();\n//     dispatch(authOperations.register({ name, email, password }));\n//   }\n//   return (\n//     <>\n//       <form onSubmit={onSubmit}>\n//         <label>\n//           Name{' '}\n//           <input type=\"text\" name=\"name\" value={name} onChange={onChange} />\n//         </label>\n//         <label>\n//           Email{' '}\n//           <input type=\"email\" name=\"email\" value={email} onChange={onChange} />\n//         </label>\n//         <label>\n//           Password{' '}\n//           <input\n//             type=\"text\"\n//             name=\"password\"\n//             value={password}\n//             onChange={onChange}\n//           />\n//         </label>\n//         <button type=\"submit\">submit</button>\n//       </form>\n//     </>\n//   );\n"],"names":["theme","createTheme","RegisterForm","useState","error","setError","name","setName","isUser","setIsUser","passwordError","setPasswordError","dispatch","useDispatch","handleSubmit","event","preventDefault","data","FormData","currentTarget","authOperations","get","email","password","res","console","log","payload","nameUser","target","elements","value","passwordLength","length","emailLength","undefined","message","component","maxWidth","sx","marginTop","display","flexDirection","alignItems","m","bgcolor","variant","noValidate","onSubmit","mt","container","spacing","item","xs","autoComplete","required","fullWidth","id","label","autoFocus","severity","style","marginBottom","type","mb","justifyContent","href"],"sourceRoot":""}